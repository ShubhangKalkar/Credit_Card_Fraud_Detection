# -*- coding: utf-8 -*-
"""bd_hw2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d4bhrtujRF5U3OEhS2fmve0j_4fG97qs
"""

class CreditCardFraudDetectionMRJob(MRJob):

    def mapper(self, _, line):
        # Split the CSV line into fields
        fields = line.strip().split(',')

        # Assuming the first column is the transaction ID and the last column is the transaction class
        transaction_id = fields[0]
        transaction_class = int(fields[-1])

        # Emit key-value pairs with transaction ID as the key and transaction class as the value
        yield transaction_id, transaction_class

    def reducer(self, transaction_id, classes):
        # Count the number of transactions for each class
        num_normal_transactions = 0
        num_fraudulent_transactions = 0

        for transaction_class in classes:
            if transaction_class == 0:
                num_normal_transactions += 1
            else:
                num_fraudulent_transactions += 1

        # Output the transaction ID and the counts of normal and fraudulent transactions
        yield transaction_id, (num_normal_transactions, num_fraudulent_transactions)

if __name__ == '__main__':
    CreditCardFraudDetectionMRJob.run()

from mrjob.job import MRJob

class CreditCardFraudDetectionMRJob(MRJob):

    def mapper(self, _, line):
        # Skip header line
        if not line.startswith("Time"):
            # Split the CSV line into fields
            fields = line.strip().split(',')

            # Extract relevant fields
            time = fields[0]
            v1 = fields[1]
            v2 = fields[2]
            v3 = fields[3]
            v4 = fields[4]
            v5 = fields[5]
            v6 = fields[6]
            v7 = fields[7]
            v8 = fields[8]
            v9 = fields[9]
            v10 = fields[10]
            v11 = fields[11]
            v12 = fields[12]
            v13 = fields[13]
            v14 = fields[14]
            v15 = fields[15]
            v16 = fields[16]
            v17 = fields[17]
            v18 = fields[18]
            v19 = fields[19]
            v20 = fields[20]
            v21 = fields[21]
            v22 = fields[22]
            v23 = fields[23]
            v24 = fields[24]
            v25 = fields[25]
            v26 = fields[26]
            v27 = fields[27]
            v28 = fields[28]
            amount = fields[29]
            fraud_class = fields[30]

            # Emit key-value pairs with transaction ID as the key and transaction class as the value
            yield time, (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, amount, fraud_class)

    def reducer(self, time, details):
        # Initialize counters
        total_transactions = 0
        total_amount = 0
        num_fraudulent_transactions = 0

        # Iterate through transactions with the same time
        for transaction in details:
            total_transactions += 1
            total_amount += float(transaction[-2])  # Assuming Amount is the second last field
            if transaction[-1] == '1':  # Assuming Class is the last field
                num_fraudulent_transactions += 1

        # Calculate average amount
        avg_amount = total_amount / total_transactions if total_transactions > 0 else 0

        # Output time and summary statistics
        yield time, (total_transactions, num_fraudulent_transactions, avg_amount)


if __name__ == '__main__':
    CreditCardFraudDetectionMRJob.run()

from mrjob.job import MRJob

class CreditCardFraudDetectionMRJob(MRJob):

    def mapper(self, _, line):
        # Skip header line
        if not line.startswith("Time"):
            # Split the CSV line into fields
            fields = line.strip().split(',')

            # Extract relevant fields
            time = fields[0]
            amount = float(fields[-2])  # Assuming Amount is the second last field
            fraud_class = fields[-1]  # Assuming Class is the last field

            # Emit key-value pairs with transaction time as the key and transaction details as the value
            yield time, (amount, fraud_class)

    def reducer(self, time, details):
        # Initialize counters
        total_transactions = 0
        total_amount = 0
        num_fraudulent_transactions = 0

        # Iterate through transactions with the same time
        for transaction in details:
            total_transactions += 1
            total_amount += transaction[0]
            if transaction[1] == '1':  # Assuming '1' indicates a fraudulent transaction
                num_fraudulent_transactions += 1

        # Calculate average amount
        avg_amount = total_amount / total_transactions if total_transactions > 0 else 0

        # Output time and summary statistics
        yield time, (total_transactions, num_fraudulent_transactions, avg_amount)


if __name__ == '__main__':
    CreditCardFraudDetectionMRJob.run()